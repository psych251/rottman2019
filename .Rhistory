# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
return(t.test(rnorm(30))$p.value)
}
# then if the p-value is within the range p < .25 and p > .05, ## does this mean the average p value?
}
library(tidyverse)
result <- numeric(10000)
for (i in 1:10000) {
X <- rnorm(30, 0, 1)
result[i] <- t.test(X)$p.value
}
sig_results <- result < 0.05
sum(sig_results)
# signficant_results <- length(filter(result, V1 < 0.05))
## do I need to make "result" into a vector in order to apply a filter???
sum(sig_results)/10000
# replicate(10000, t.test(rnorm(30)))
pvals <- replicate(10000, t.test(rnorm(30))$p.value)
sig_pvals <- pvals < 0.05
# View(sig_pvals)
sum(sig_pvals)
# filter(pvals, pvals < 0.05)
# sig_pvals <- length(filter(pvals, pvals < 0.05))
sum(sig_pvals)/10000
double.sample <- function () {
pvals_2 <- (t.test(rnorm(30))$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
return(t.test(rnorm(30))$p.value)
}
# then if the p-value is within the range p < .25 and p > .05, ## does this mean the average p value?
}
tenk_results <- replicate(10000, double.sample())
View(tenk_results)
# tenk_results < 0.05
sum(tenk_results < 0.05)
645/10000
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
return(t.test(rnorm(30))$p.value)
}
pvals_2 <- (t.test(rnorm(30))$p.value)
first_sample <- (t.test(rnorm(30))
pvals_2 <- (t.test(rnorm(30))$p.value)
first_sample <- rnorm(30)
first_sample
pvals_2 <- (t.test(first_sample)$p.value)
concat(first_sample, rnorm(30))
library(tidyverse)
result <- numeric(10000)
for (i in 1:10000) {
X <- rnorm(30, 0, 1)
result[i] <- t.test(X)$p.value
}
sig_results <- result < 0.05
sum(sig_results)
# signficant_results <- length(filter(result, V1 < 0.05))
## do I need to make "result" into a vector in order to apply a filter???
sum(sig_results)/10000
# replicate(10000, t.test(rnorm(30)))
pvals <- replicate(10000, t.test(rnorm(30))$p.value)
sig_pvals <- pvals < 0.05
# View(sig_pvals)
sum(sig_pvals)
# filter(pvals, pvals < 0.05)
# sig_pvals <- length(filter(pvals, pvals < 0.05))
sum(sig_pvals)/10000
add(first_sample, rnorm(30))
c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
double.sample <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
# then if the p-value is within the range p < .25 and p > .05, ## does this mean the average p value?
}
double.sample(1)
double.sample()
first_sample <- rnorm(30)
tenk_results <- replicate(10000, double.sample())
View(tenk_results)
sum(tenk_results < 0.05)
sum(tenk_results)/10000
sum(tenk_results < 0.05)/10000
double.sample <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
# then if the p-value is within the range p < .25 and p > .05, ## does this mean the average p value?
}
double.sample()
tenk_results <- replicate(10000, double.sample())
View(tenk_results)
sum(tenk_results < 0.05)
sum(tenk_results < 0.05)/10000
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
double.sample <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
# then if the p-value is within the range p < .25 and p > .05, ## does this mean the average p value?
}
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.5) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
# The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.5.
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.5) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
# The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.5.
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.5) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
# The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.5.
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.5) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
double.sample <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
double.sample()
double.sample()
double.sample()
double.sample()
double.sample()
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
# The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.5.
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.5) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
# The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.5.
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.5) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
# The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.5.
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.5) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
double.sample0.5 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.5) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample0.5())
sum(tenk_results < 0.05)/10000
double.sample0.75 <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.75) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample0.75())
sum(tenk_results < 0.05)/10000
# The researcher doubles the sample whenever their pvalue is not significant.
double.sample_whenever <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample_whenever())
sum(tenk_results < 0.05)/10000
library(tidyverse)
result <- numeric(10000)
for (i in 1:10000) {
X <- rnorm(30, 0, 1)
result[i] <- t.test(X)$p.value
}
sig_results <- result < 0.05
sum(sig_results)/10000
pvals <- replicate(10000, t.test(rnorm(30))$p.value)
sig_pvals <- pvals < 0.05
sum(sig_pvals)/10000
double.sample <- function () {
first_sample <- rnorm(30)
pvals_2 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2<0.05) {
return(pvals_2)
} else if (pvals_2>0.25) {
return(pvals_2)
} else {
second_sample <- c(first_sample, rnorm(30))
return(t.test(second_sample)$p.value)
}
}
tenk_results <- replicate(10000, double.sample())
sum(tenk_results < 0.05)/10000
double.sample0.5 <- function () {
first_sample_0.05 <- rnorm(30)
pvals_2_0.05 <- (t.test(first_sample)$p.value)
# View(pvals_2)
if(pvals_2_0.05<0.05) {
return(pvals_2_0.05)
} else if (pvals_2_0.05>0.5) {
return(pvals_2_0.05)
} else {
second_sample_0.05 <- c(first_sample_0.05, rnorm(30))
return(t.test(second_sample_0.05)$p.value)
}
}
tenk_results_0.05 <- replicate(10000, double.sample0.5())
double.sample0.75 <- function () {
first_sample_0.75 <- rnorm(30)
pvals_2_0.75 <- (t.test(first_sample_0.75)$p.value)
if(pvals_2_0.75<0.05) {
return(pvals_2_0.75)
} else if (pvals_2_0.75>0.75) {
return(pvals_2_0.75)
} else {
second_sample_0.75 <- c(first_sample_0.75, rnorm(30))
return(t.test(second_sample_0.75)$p.value)
}
}
tenk_results_0.75 <- replicate(10000, double.sample0.75())
sum(tenk_results_0.75 < 0.05)/10000
# The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.5.
double.sample0.5 <- function () {
first_sample_0.05 <- rnorm(30)
pvals_2_0.05 <- (t.test(first_sample_0.05)$p.value)
if(pvals_2_0.05<0.05) {
return(pvals_2_0.05)
} else if (pvals_2_0.05>0.5) {
return(pvals_2_0.05)
} else {
second_sample_0.05 <- c(first_sample_0.05, rnorm(30))
return(t.test(second_sample_0.05)$p.value)
}
}
tenk_results_0.05 <- replicate(10000, double.sample0.5())
sum(tenk_results_0.05 < 0.05)/10000
# The researcher doubles the sample whenever their pvalue is not significant, but it's less than 0.75.
double.sample0.75 <- function () {
first_sample_0.75 <- rnorm(30)
pvals_2_0.75 <- (t.test(first_sample_0.75)$p.value)
if(pvals_2_0.75<0.05) {
return(pvals_2_0.75)
} else if (pvals_2_0.75>0.75) {
return(pvals_2_0.75)
} else {
second_sample_0.75 <- c(first_sample_0.75, rnorm(30))
return(t.test(second_sample_0.75)$p.value)
}
}
tenk_results_0.75 <- replicate(10000, double.sample0.75())
sum(tenk_results_0.75 < 0.05)/10000
# The researcher doubles the sample whenever their pvalue is not significant.
double.sample_whenever <- function () {
first_sample_whenever <- rnorm(30)
pvals_2_whenever <- (t.test(first_sample_whenever)$p.value)
if(pvals_2_whenever<0.05) {
return(pvals_2_whenever)
} else {
second_sample_whenever <- c(first_sample_whenever, rnorm(30))
return(t.test(second_sample_whenever)$p.value)
}
}
tenk_results_whenever <- replicate(10000, double.sample_whenever())
sum(tenk_results_whenever < 0.05)/10000
setwd("C:/Users/C. Ceballos/Desktop/PSYCH 251/rottman2019")
###Data Preparation
# I will create a survey on Qualtrics, and link that survey to Mechanical Turk. My survey has 16 questions, and each question has two dosages, so it is actually 32 questions total. All questions are provided in the Rottman 2019 paper. Each participant is presented with 16 moral violations, that vary by domain (harm vs. purity violation) and by . dosage (low vs. high or magnitude vs. frequency). I will use the "Randomizer" function in Qualtrics. To ensure that participants see the appropriate questions.
####Load Relevant Libraries and Functions
# The libraries I need are the useful, all-purpose libraries:
library(foreign) # for reading spss formatted data
library(tidyverse)
####Import data
data = read_csv("PilotAdata.csv")
#### Look at data
View(data)
colnames(data)
#### Data exclusion / filtering
# For Pilot A, I have 6 actual survey results, and the rest are spam from when I was testing/building the survey.
# So I need to get rid of the ~25 entrieIs that are spam. The spam were all short, less than 75 seconds
# I'll also have to filter out the people who failed the attention checks.
# Per Rottman, you fail the attention check if you rate "a person destroys the entire planet" below 49 on the moral
# wrongness scale, or if you rate "a person gives money to a charitable organization" above 51 on moral wrongness.
data_filtered <- data %>%
filter(Att1_8 > 49)  %>%  # fail first attention check, "a person destroys the entire planet"
filter(Att2_4 < 51)  %>%  # fail second attention check, "a person gives money to charity"
filter(Duration..in.seconds. > 75) # filter out any quizzes that were completed in less than 75 seconds
# View(data_filtered)
#For some reason the above code is not working.... I'll have to go to office hours
#### Prepare data for analysis - create columns etc.
data = read_csv("PilotAdata.csv")
colnames(data)
library(foreign) # for reading spss formatted data
library(tidyverse)
filename <- "PilotAdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
colnames(data)
View(data)
colnames(df)
colnames(data)
filename <- "PilotAdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
data = read_csv(filename, skip = 3, col_names = FALSE)
colnames(data)= headers
colnames(df)
filename <- "PilotAdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
library(foreign) # for reading spss formatted data
library(tidyverse)
filename <- "PilotAdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
colnames(df)
View(df)
data_filtered <- df %>%
filter(Att1_8 > 49)  %>%  # fail first attention check, "a person destroys the entire planet"
filter(Att2_4 < 51)  %>%  # fail second attention check, "a person gives money to charity"
filter(Duration..in.seconds. > 75) # filter out any quizzes that were completed in less than 75 seconds
View(data_filtered)
data_filtered <- df %>%
filter(Att1_8 < 49)  %>%
data_filtered <- df %>%
filter(Att1_8 < 49)  %>
data_filtered <- df %>%
filter(Att1_8 < 49)
View(data_filtered)
data_filtered <- df %>%
filter(Att1_8 > 49)
View(data_filtered)
data_filtered <- df %>%
filter(Att1_8 > 49)  # %>%  # fail first attention check, "a person destroys the entire planet"
filter(Att2_4 < 51)
colnames(df)
