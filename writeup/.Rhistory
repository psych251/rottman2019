# labs(x = "Age in Months", y = "Number of Children")
# ggplot(prompt, aes(x=prompt$Prompt, y=prompt$meanWrongness, color = prompt$High_Dosage)) +
# geom_point(shape = ".") +
# geom_smooth() +
# facet_grid(prompt$Purity_Violation)
# ggtitle("Hand-Looking as a Function of Age and Condition") +
# labs(x = "Age in Months", y = "Amount of Time Hand-Looking")
prompt <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
prompt
prompt <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
prompt
# Next, I'll do the analysis for the purity violations only.
sd_data_Purity <- d %>%
filter(Purity_Violation == TRUE) %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarize(Wrongness = (mean(Rating, na.rm=T)))
wider_d_Purity <- sd_data_Purity %>%
pivot_wider(id_cols = mTurkCode, names_from = High_Dosage, values_from = Wrongness) %>%
rename(HIGH = "TRUE", LOW = "FALSE") %>%
mutate(Indv_Diff = HIGH - LOW)
mean(wider_d_Purity$Indv_Diff)
sd(wider_d_Purity$Indv_Diff)
library(foreign) # for reading spss formatted data
library(tidyverse)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm
filter( (Att1_8 > 49) & (Att2_4 < 51) )  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(EndDate < "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm
filter( (Att1_8 > 49) & (Att2_4 < 51) )  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(EndDate < "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
data <- df %>%
filter(StartDate > "12/4/2019 23:37") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm
View(data)
data <- df %>%
# filter(StartDate > "12/4/2019 23:37") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm. Right now, I have 146 responses
filter( (Att1_8 > 49) & (Att2_4 < 51) )
View(data)
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm. Right now, I have 146 responses
filter( (Att1_8 > 49) & (Att2_4 < 51) )  ## Include only rows where the person passed the first and second attention checks.
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm. Right now, I have 146 responses
filter( (Att1_8 > 49) & (Att2_4 < 51) )  ## Include only rows where the person passed the first and second attention checks.
View(data)
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm. Right now, I have 146 responses
filter( (Att1_8 > 49) & (Att2_4 < 51) )  ## Include only rows where the person passed the first and second attention checks. Keeps 142 of the responses.
# To track how many people were excluded
excluded_data <- df %>%
filter(EndDate < "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm. Right now, I have 146 responses
filter( (Att1_8 > 49) & (Att2_4 < 51) )  ## Include only rows where the person passed the first and second attention checks. Keeps 142 of the responses.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
filter( (Att1_8 > 49) & (Att2_4 < 51) )  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
d <- data %>%
pivot_longer(cols = A1_10:Att2_4, names_to = "Prompt", values_to = "Rating") %>% # pivots into long form
select(c("Prompt", "Rating", "mTurkCode")) %>% # keeps only the columns I need
mutate(Purity_Violation = grepl("2", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is a purity violation and "FALSE" if the violation is a harm violation
mutate(High_Dosage = grepl("'", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is the high-dosage version violation and "FALSE" if the violation is the low-dosage version violation
filter(Prompt != "Att1_8") %>% # remove the wrongness ratings for the first attention check
filter(Prompt != "Att2_4") # remove the wrongess ratings for the second attention check
colnames(d)
means <- d %>%
group_by(Purity_Violation, High_Dosage) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
head(means)
# Now I'll find the difference between high-dosage  and low-dosage harm violations, and high-dosage and low-dosage purity violations
mean_Harm_LowDosage <- means[1,3]
mean_Harm_HighDosage <- means[2,3]
mean_Purity_LowDosage <- means[3,3]
mean_Purity_HighDosage <- means[4,3]
diff_means_harms <- mean_Harm_HighDosage - mean_Harm_LowDosage
diff_means_purity <- mean_Purity_HighDosage - mean_Purity_LowDosage
diff_means_harms
diff_means_purity
# First I'll do the analysis for the harm violations only.
sd_data <- d %>%
filter(Purity_Violation == FALSE) %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarize(Wrongness = (mean(Rating, na.rm=T)))
wider_d <- sd_data %>%
pivot_wider(id_cols = mTurkCode, names_from = High_Dosage, values_from = Wrongness) %>%
rename(HIGH = "TRUE", LOW = "FALSE") %>%
mutate(Indv_Diff = HIGH - LOW)
mean(wider_d$Indv_Diff)
sd(wider_d$Indv_Diff)
# Mike's alternative code for the SD and mean analysis:
# I'm not sure if I'm doing the SD analysis correctly, so I'll go to Mike's office hours and work through his suggestion. Right now the code is not working.
# get difference scores for each participant.
# ms <- d %>%
# group_by(mTurkCode, Purity_Violation) %>%
# summarise(diff = Wrongness[High_Dosage] - Wrongness[!High_Dosage]) # this code is not working so I'll comment out
# get mean and sd of those differences scores
# ms %>%
# group_by(Purity_Violation) %>%
# summarise(mean_diff = mean(diff),
# sd_diff = sd(diff))
d <- data %>%
pivot_longer(cols = A1_10:Att2_4, names_to = "Prompt", values_to = "Rating") %>% # pivots into long form
select(c("Prompt", "Rating", "mTurkCode")) %>% # keeps only the columns I need
mutate(Purity_Violation = grepl("2", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is a purity violation and "FALSE" if the violation is a harm violation
mutate(High_Dosage = grepl("'", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is the high-dosage version violation and "FALSE" if the violation is the low-dosage version violation
filter(Prompt != "Att1_8") %>% # remove the wrongness ratings for the first attention check
filter(Prompt != "Att2_4") # remove the wrongess ratings for the second attention check
colnames(d)
means <- d %>%
group_by(Purity_Violation, High_Dosage) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
head(means)
# Now I'll find the difference between high-dosage  and low-dosage harm violations, and high-dosage and low-dosage purity violations
mean_Harm_LowDosage <- means[1,3]
mean_Harm_HighDosage <- means[2,3]
mean_Purity_LowDosage <- means[3,3]
mean_Purity_HighDosage <- means[4,3]
diff_means_harms <- mean_Harm_HighDosage - mean_Harm_LowDosage
diff_means_purity <- mean_Purity_HighDosage - mean_Purity_LowDosage
diff_means_harms
diff_means_purity
# First I'll do the analysis for the harm violations only.
sd_data <- d %>%
filter(Purity_Violation == FALSE) %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarize(Wrongness = (mean(Rating, na.rm=T)))
wider_d <- sd_data %>%
pivot_wider(id_cols = mTurkCode, names_from = High_Dosage, values_from = Wrongness) %>%
rename(HIGH = "TRUE", LOW = "FALSE") %>%
mutate(Indv_Diff = HIGH - LOW)
mean(wider_d$Indv_Diff)
sd(wider_d$Indv_Diff)
# Mike's alternative code for the SD and mean analysis:
# I'm not sure if I'm doing the SD analysis correctly, so I'll go to Mike's office hours and work through his suggestion. Right now the code is not working.
# get difference scores for each participant.
ms <- d %>%
group_by(mTurkCode, Purity_Violation) %>%
summarise(diff = Wrongness[High_Dosage] - Wrongness[!High_Dosage]) # this code is not working so I'll comment out
# Mike's alternative code for the SD and mean analysis:
# I'm not sure if I'm doing the SD analysis correctly, so I'll go to Mike's office hours and work through his suggestion. Right now the code is not working.
# get difference scores for each participant.
ms <- d %>%
group_by(mTurkCode, Purity_Violation) %>%
summarise(diff = d$Wrongness[High_Dosage] - d$Wrongness[!High_Dosage]) # this code is not working so I'll comment out
View(d)
# Mike's alternative code for the SD and mean analysis:
# I'm not sure if I'm doing the SD analysis correctly, so I'll go to Mike's office hours and work through his suggestion. Right now the code is not working.
View(d)
# get difference scores for each participant.
ms <- d %>%
group_by(mTurkCode, Purity_Violation) %>%
summarise(diff = d$Rating[High_Dosage] - d$Rating[!High_Dosage]) # this code is not working so I'll comment out
# Mike's alternative code for the SD and mean analysis:
# I'm not sure if I'm doing the SD analysis correctly, so I'll go to Mike's office hours and work through his suggestion. Right now the code is not working.
# get difference scores for each participant.
ms <- d %>%
group_by(mTurkCode, Purity_Violation) %>%
summarise(diff = d$Rating[High_Dosage] - d$Rating[!High_Dosage]) # this code is not working so I'll comment out
# Next, I'll do the analysis for the purity violations only.
sd_data_Purity <- d %>%
filter(Purity_Violation == TRUE) %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarize(Wrongness = (mean(Rating, na.rm=T)))
wider_d_Purity <- sd_data_Purity %>%
pivot_wider(id_cols = mTurkCode, names_from = High_Dosage, values_from = Wrongness) %>%
rename(HIGH = "TRUE", LOW = "FALSE") %>%
mutate(Indv_Diff = HIGH - LOW)
mean(wider_d_Purity$Indv_Diff)
sd(wider_d_Purity$Indv_Diff)
# Load Library
library(ggplot2)
# Most basic violin chart
ggplot(d, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
## ** How do I add a stat_summary to the violin plot??***
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
# S1.Wrong.NoInteractionTerm <- lmer(Wrong ~ Domain + Dose + (1 | ID) + (1 | Item),
#               data = Dosage.Tidy.S1)
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model2)
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model2)
prompt <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
prompt
View(prompt)
library(foreign) # for reading spss formatted data
library(tidyverse)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
filter( (Att1_8 > 49) & (Att2_4 < 51) )  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
d <- data %>%
pivot_longer(cols = A1_10:Att2_4, names_to = "Prompt", values_to = "Rating") %>% # pivots into long form
select(c("Prompt", "Rating", "mTurkCode")) %>% # keeps only the columns I need
mutate(Purity_Violation = grepl("2", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is a purity violation and "FALSE" if the violation is a harm violation
mutate(High_Dosage = grepl("'", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is the high-dosage version violation and "FALSE" if the violation is the low-dosage version violation
filter(Prompt != "Att1_8") %>% # remove the wrongness ratings for the first attention check
filter(Prompt != "Att2_4") # remove the wrongess ratings for the second attention check
colnames(d)
means <- d %>%
group_by(Purity_Violation, High_Dosage) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
head(means)
# Now I'll find the difference between high-dosage  and low-dosage harm violations, and high-dosage and low-dosage purity violations
mean_Harm_LowDosage <- means[1,3]
mean_Harm_HighDosage <- means[2,3]
mean_Purity_LowDosage <- means[3,3]
mean_Purity_HighDosage <- means[4,3]
diff_means_harms <- mean_Harm_HighDosage - mean_Harm_LowDosage
diff_means_purity <- mean_Purity_HighDosage - mean_Purity_LowDosage
diff_means_harms
diff_means_purity
# First I'll do the analysis for the harm violations only.
sd_data <- d %>%
filter(Purity_Violation == FALSE) %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarize(Wrongness = (mean(Rating, na.rm=T)))
wider_d <- sd_data %>%
pivot_wider(id_cols = mTurkCode, names_from = High_Dosage, values_from = Wrongness) %>%
rename(HIGH = "TRUE", LOW = "FALSE") %>%
mutate(Indv_Diff = HIGH - LOW)
mean(wider_d$Indv_Diff)
sd(wider_d$Indv_Diff)
# Mike's alternative code for the SD and mean analysis:
# I'm not sure if I'm doing the SD analysis correctly, so I'll go to Mike's office hours and work through his suggestion. Right now the code is not working.
# get difference scores for each participant.
ms <- d %>%
group_by(mTurkCode, Purity_Violation) %>%
summarise(diff = d$Rating[High_Dosage] - d$Rating[!High_Dosage]) # this code is not working so I'll comment out
# View(prompt)
# ggplot(prompt, aes(x= prompt$meanWrongness, color = prompt$High_Dosage)) +
# geom_histogram(binwidth = 3)
# ggtitle("Ages of Children in Study") +
# labs(x = "Age in Months", y = "Number of Children")
# ggplot(prompt, aes(x=prompt$Prompt, y=prompt$meanWrongness, color = prompt$High_Dosage)) +
# geom_point(shape = ".") +
# geom_smooth() +
# facet_grid(prompt$Purity_Violation)
# ggtitle("Hand-Looking as a Function of Age and Condition") +
# labs(x = "Age in Months", y = "Amount of Time Hand-Looking")
t.test
# Mike's alternative code for the SD and mean analysis:
# I'm not sure if I'm doing the SD analysis correctly, so I'll go to Mike's office hours and work through his suggestion. Right now the code is not working.
# get difference scores for each participant.
ms <- d %>%
group_by(mTurkCode, Purity_Violation) %>%
summarise(diff = d$Rating[High_Dosage] - d$Rating[!High_Dosage]) # this code is not working so I'll comment out
d
# get difference scores for each participant.
ms <- d %>%
group_by(mTurkCode, Purity_Violation) %>%
summarise(diff = Rating[High_Dosage] - Rating[!High_Dosage]) # this code is not working so I'll comment out
# get condition means for each participant
mss <- d %>%
group_by(mTurkCode, Purity_Violation, Prompt) %>%
summarise(Rating = mean(Rating, na.rm=TRUE))
mss]
,ss
mss
df
df$`F1'_8`
data
d
summary(d$Rating)
is.na(d$Rating)
is.na(d$Rating))
is.na(d$Rating)
sum(is.na(d$Rating))
# get condition means for each participant
mss <- d %>%
group_by(mTurkCode, Purity_Violation) %>%
summarise(Rating = mean(Rating, na.rm=TRUE))
mss
# get difference scores for each participant.
diffs <- mss %>%
summarise(diff = Rating[High_Dosage] - Rating[!High_Dosage]) # this code is not working so I'll comment out
# get condition means for each participant
mss <- d %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarise(Rating = mean(Rating, na.rm=TRUE))
mss
# get difference scores for each participant.
diffs <- mss %>%
summarise(diff = Rating[High_Dosage] - Rating[!High_Dosage]) # this code is not working so I'll comment out
diffs
# get mean and sd of those differences scores
diffs %>%
group_by(Purity_Violation) %>%
summarise(mean_diff = mean(diff),
sd_diff = sd(diff))
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model2)
# Load Library
library(ggplot2)
# Most basic violin chart
ggplot(d, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
## ** How do I add a stat_summary to the violin plot??***
# Most basic violin chart
ggplot(d, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary() +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(d, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(aes(col=High_Dosage)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(d, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(aes(col=High_Dosage), position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(d, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_ci_boot",
aes(col=High_Dosage), position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(ms, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_ci_boot",
aes(col=High_Dosage), position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_ci_boot",
aes(col=High_Dosage), position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
?stat_summary
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(col=High_Dosage), position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
aes(col=High_Dosage), position="dodge") +
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(col=High_Dosage), position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot", position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
# geom_violin() +
stat_summary(fun.data = "mean_cl_boot", position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
install.packages("Hmisc")
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
# geom_violin() +
stat_summary(fun.data = "mean_cl_boot", position="dodge") +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
# geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(col = High_Dosage), position=position_dodge(width = 1)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(col = High_Dosage), position=position_dodge(width = 1)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(group = High_Dosage), position=position_dodge(width = 1)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Type of Violation", y = "Wrongness Rating")
summary(model)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if(length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)}
packages <- c("lme4", "lmerTest", "reshape2", "Rmisc", "magrittr", "psych", "lsr",
"tidyverse", "ggthemes", "viridis", "grid", "simr", "emmeans")
ipak(packages)
custom.theme <- theme_tufte() + theme(panel.background = element_blank(),
legend.key = element_blank(), legend.background = element_blank(),
legend.position = "right", legend.title = element_text(color = "black",
face = "bold", size = 14, family = "Helvetica", hjust = .5),
legend.text = element_text(color = "black", face = "bold", size = 12,
family = "Helvetica"), strip.background = element_blank(),
strip.text = element_text(color = "black", face = "bold", size = 12,
family = "Helvetica"), panel.grid = element_blank(), axis.text =
element_text(color = "black", face = "bold", size = 12,
family = "Helvetica"), axis.line = element_line(color = "black"),
axis.title = element_text(color = "black", face = "bold", size = 14,
family = "Helvetica"), axis.text.x = element_text(vjust = .6))
theme_set(custom.theme)
posn.d <- position_dodge(0.95)
emm_options(opt.digits = FALSE)
setwd("~/Desktop/Research/Dosage")
