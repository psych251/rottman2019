filename <- "FinalData.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
d <- data %>%
pivot_longer(cols = A1_10:Att2_4, names_to = "Prompt", values_to = "Rating") %>% # pivots into long form
select(c("Prompt", "Rating", "mTurkCode")) %>% # keeps only the columns I need
mutate(Purity_Violation = grepl("2", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is a purity violation and "FALSE" if the violation is a harm violation
mutate(High_Dosage = grepl("'", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is the high-dosage version violation and "FALSE" if the violation is the low-dosage version violation
filter(Prompt != "Att1_8") %>% # remove the wrongness ratings for the first attention check
filter(Prompt != "Att2_4") # remove the wrongess ratings for the second attention check
means <- d %>%
group_by(Purity_Violation, High_Dosage) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
head(means)
# get condition means for each participant
mss <- d %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarise(Rating = mean(Rating, na.rm=TRUE))
# get difference scores for each participant.
diffs <- mss %>%
summarise(diff = Rating[High_Dosage] - Rating[!High_Dosage], na.rm=TRUE)
# get mean and sd of those differences scores
diffs %>%
group_by(Purity_Violation) %>%
summarise(mean_diff = mean(diff, na.rm=TRUE), sd_diff = sd(diff, na.rm=TRUE))
# Load Library
library(ggplot2)
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(group = High_Dosage), position=position_dodge(width = 1)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Purity Violation", y = "Wrongness Rating")
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model2)
MostWrong <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
print(MostWrong)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
d <- data %>%
pivot_longer(cols = A1_10:Att2_4, names_to = "Prompt", values_to = "Rating") %>% # pivots into long form
select(c("Prompt", "Rating", "mTurkCode")) %>% # keeps only the columns I need
mutate(Purity_Violation = grepl("2", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is a purity violation and "FALSE" if the violation is a harm violation
mutate(High_Dosage = grepl("'", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is the high-dosage version violation and "FALSE" if the violation is the low-dosage version violation
filter(Prompt != "Att1_8") %>% # remove the wrongness ratings for the first attention check
filter(Prompt != "Att2_4") # remove the wrongess ratings for the second attention check
means <- d %>%
group_by(Purity_Violation, High_Dosage) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
head(means)
# get condition means for each participant
mss <- d %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarise(Rating = mean(Rating, na.rm=TRUE))
# get difference scores for each participant.
diffs <- mss %>%
summarise(diff = Rating[High_Dosage] - Rating[!High_Dosage], na.rm=TRUE)
# get mean and sd of those differences scores
diffs %>%
group_by(Purity_Violation) %>%
summarise(mean_diff = mean(diff, na.rm=TRUE), sd_diff = sd(diff, na.rm=TRUE))
# Load Library
library(ggplot2)
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(group = High_Dosage), position=position_dodge(width = 1)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Purity Violation", y = "Wrongness Rating")
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model2)
MostWrong <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
print(MostWrong)
library(foreign) # for reading spss formatted data
library(tidyverse)
library(dplyr)
Dosage.Tidy.S1 <- read.csv("RottmanS1Data.csv", header = TRUE)
# Use a filter to view ONLY the harm-related questions and exclude the purity-related questions
Dosage.Tidy.S1_Harm <- Dosage.Tidy.S1  %>%
filter(Domain == "Harm") # keep only the Harm prompts and exclude Purity
# Assign all the high-dosage harm violations to x
x <- Dosage.Tidy.S1_Harm %>%
filter(Dose == "High")
# Assign all the low-dosage harm violations to y
y <- Dosage.Tidy.S1_Harm %>%
filter(Dose == "Low")
# Run a t-test on x and y
t.test(x$Wrong, y$Wrong)
library(foreign) # for reading spss formatted data
library(tidyverse)
library(dplyr)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
d <- data %>%
pivot_longer(cols = A1_10:Att2_4, names_to = "Prompt", values_to = "Rating") %>% # pivots into long form
select(c("Prompt", "Rating", "mTurkCode")) %>% # keeps only the columns I need
mutate(Purity_Violation = grepl("2", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is a purity violation and "FALSE" if the violation is a harm violation
mutate(High_Dosage = grepl("'", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is the high-dosage version violation and "FALSE" if the violation is the low-dosage version violation
filter(Prompt != "Att1_8") %>% # remove the wrongness ratings for the first attention check
filter(Prompt != "Att2_4") # remove the wrongess ratings for the second attention check
means <- d %>%
group_by(Purity_Violation, High_Dosage) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
head(means)
# get condition means for each participant
mss <- d %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarise(Rating = mean(Rating, na.rm=TRUE))
# get difference scores for each participant.
diffs <- mss %>%
summarise(diff = Rating[High_Dosage] - Rating[!High_Dosage], na.rm=TRUE)
# get mean and sd of those differences scores
diffs %>%
group_by(Purity_Violation) %>%
summarise(mean_diff = mean(diff, na.rm=TRUE), sd_diff = sd(diff, na.rm=TRUE))
# Load Library
library(ggplot2)
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(group = High_Dosage), position=position_dodge(width = 1)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Purity Violation", y = "Wrongness Rating")
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model2)
MostWrong <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
print(MostWrong)
setwd("C:/Users/C. Ceballos/Desktop/PSYCH 251/rottman2019_new/writeup")
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
View(df)
library(foreign) # for reading spss formatted data
library(tidyverse)
library(dplyr)
Dosage.Tidy.S1 <- read.csv("RottmanS1Data.csv", header = TRUE)
# Use a filter to view ONLY the harm-related questions and exclude the purity-related questions
Dosage.Tidy.S1_Harm <- Dosage.Tidy.S1  %>%
filter(Domain == "Harm") # keep only the Harm prompts and exclude Purity
# Assign all the high-dosage harm violations to x
x <- Dosage.Tidy.S1_Harm %>%
filter(Dose == "High")
# Assign all the low-dosage harm violations to y
y <- Dosage.Tidy.S1_Harm %>%
filter(Dose == "Low")
# Run a t-test on x and y
t.test(x$Wrong, y$Wrong)
library(foreign) # for reading spss formatted data
library(tidyverse)
library(dplyr)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
d <- data %>%
pivot_longer(cols = A1_10:Att2_4, names_to = "Prompt", values_to = "Rating") %>% # pivots into long form
select(c("Prompt", "Rating", "mTurkCode")) %>% # keeps only the columns I need
mutate(Purity_Violation = grepl("2", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is a purity violation and "FALSE" if the violation is a harm violation
mutate(High_Dosage = grepl("'", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is the high-dosage version violation and "FALSE" if the violation is the low-dosage version violation
filter(Prompt != "Att1_8") %>% # remove the wrongness ratings for the first attention check
filter(Prompt != "Att2_4") # remove the wrongess ratings for the second attention check
means <- d %>%
group_by(Purity_Violation, High_Dosage) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
head(means)
# get condition means for each participant
mss <- d %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarise(Rating = mean(Rating, na.rm=TRUE))
# get difference scores for each participant.
diffs <- mss %>%
summarise(diff = Rating[High_Dosage] - Rating[!High_Dosage], na.rm=TRUE)
# get mean and sd of those differences scores
diffs %>%
group_by(Purity_Violation) %>%
summarise(mean_diff = mean(diff, na.rm=TRUE), sd_diff = sd(diff, na.rm=TRUE))
# Load Library
library(ggplot2)
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(group = High_Dosage), position=position_dodge(width = 1)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Purity Violation", y = "Wrongness Rating")
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model2)
MostWrong <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
print(MostWrong)
data <- df %>%
filter(StartDate > "12/4/2019 23:37")
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
# filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
View(data)
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
filter(StartDate > "12/9/2019 8:54")
# filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
View(data)
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
data <- df %>%
filter(StartDate == "12/5/2019":"12/13/2019") # %>% # keep only
#### Data exclusion / filtering
data <- df %>%
filter(StartDate == "12/5/2019" | "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
#### Data exclusion / filtering
data <- df %>%
filter(StartDate = "12/5/2019" | "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
#### Data exclusion / filtering
data <- df %>%
filter((StartDate = "12/5/2019") | StartDate = "12/5/2019")) "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
#### Data exclusion / filtering
data <- df %>%
filter((StartDate = "12/5/2019") | (StartDate = "12/5/2019")) "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
#### Data exclusion / filtering
data <- df %>%
filter((StartDate = 12/5/2019) | (StartDate = 12/5/2019)) "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
#### Data exclusion / filtering
data <- df %>%
filter((StartDate == 12/5/2019) | (StartDate == 12/6/2019)) "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
#### Data exclusion / filtering
data <- df %>%
filter((StartDate == 12/5/2019) | (StartDate == 12/6/2019)) # "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
# filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
View(data)
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
#### Data exclusion / filtering
data <- df %>%
filter((StartDate == "12/5/2019") | (StartDate == "12/6/2019")) # "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
# filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
View(data)
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
#### Data exclusion / filtering
data <- df %>%
filter((StartDate = "12/5/2019") | (StartDate = "12/6/2019")) # "12/6/2019") # %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
#### Data exclusion / filtering
data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>% # keep only the results collected after Dec 4, 2019 at 11:37 pm.
filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
View(df)
data <- df %>%
df[,49:215]
data <- df %>%
df[1,49:215]
data2 <- df[,49:215]
data2 <- df[49:215,]
View(data2)
data <- df %>%
[49:215,]
#### Data exclusion / filtering
# Select only the results collected after Dec 4, 2019, which is when I started my final data collection on MTurk.
df2 <- df[49:215,] # select rows 49 thru 215, which has all the data from after Dec 4, 2019. I found rows 49 thru 215 by manually looking at my dataframe df.
data <- df2 %>%
filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df2 %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
library(foreign) # for reading spss formatted data
library(tidyverse)
library(dplyr)
Dosage.Tidy.S1 <- read.csv("RottmanS1Data.csv", header = TRUE)
# Use a filter to view ONLY the harm-related questions and exclude the purity-related questions
Dosage.Tidy.S1_Harm <- Dosage.Tidy.S1  %>%
filter(Domain == "Harm") # keep only the Harm prompts and exclude Purity
# Assign all the high-dosage harm violations to x
x <- Dosage.Tidy.S1_Harm %>%
filter(Dose == "High")
# Assign all the low-dosage harm violations to y
y <- Dosage.Tidy.S1_Harm %>%
filter(Dose == "Low")
# Run a t-test on x and y
t.test(x$Wrong, y$Wrong)
library(foreign) # for reading spss formatted data
library(tidyverse)
library(dplyr)
Dosage.Tidy.S1 <- read.csv("RottmanS1Data.csv", header = TRUE)
# Use a filter to view ONLY the harm-related questions and exclude the purity-related questions
Dosage.Tidy.S1_Harm <- Dosage.Tidy.S1  %>%
filter(Domain == "Harm") # keep only the Harm prompts and exclude Purity
# Assign all the high-dosage harm violations to x
x <- Dosage.Tidy.S1_Harm %>%
filter(Dose == "High")
# Assign all the low-dosage harm violations to y
y <- Dosage.Tidy.S1_Harm %>%
filter(Dose == "Low")
# Run a t-test on x and y
t.test(x$Wrong, y$Wrong)
library(foreign) # for reading spss formatted data
library(tidyverse)
library(dplyr)
filename <- "FINALdata.csv"
headers = read_csv(filename, col_names = FALSE, n_max = 1)
df = read_csv(filename, skip = 3, col_names = FALSE)
colnames(df)= headers
#### Inspect data
colnames(df)
#### Data exclusion / filtering
# Select only the results collected after Dec 4, 2019, which is when I started my final data collection on MTurk.
df2 <- df[49:215,] # select rows 49 thru 215, which has all the data from after Dec 4, 2019. I found rows 49 thru 215 by manually looking at my dataframe df.
data <- df2 %>%
filter((Att1_8 > 49) & (Att2_4 < 51))  ## Include only rows where the person passed the first and second attention checks.
# To track how many people were excluded
excluded_data <- df2 %>%
filter(StartDate > "12/4/2019 23:37") %>%
filter( (Att1_8 <= 49) | (Att2_4 >= 51) )
nrow(excluded_data) # counts the number of rows that have been excluded
nrow(data) # counts number of participants that were not excluded
d <- data %>%
pivot_longer(cols = A1_10:Att2_4, names_to = "Prompt", values_to = "Rating") %>% # pivots into long form
select(c("Prompt", "Rating", "mTurkCode")) %>% # keeps only the columns I need
mutate(Purity_Violation = grepl("2", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is a purity violation and "FALSE" if the violation is a harm violation
mutate(High_Dosage = grepl("'", x = Prompt)) %>% # adds a column that says "TRUE" if the violation is the high-dosage version violation and "FALSE" if the violation is the low-dosage version violation
filter(Prompt != "Att1_8") %>% # remove the wrongness ratings for the first attention check
filter(Prompt != "Att2_4") # remove the wrongess ratings for the second attention check
means <- d %>%
group_by(Purity_Violation, High_Dosage) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
head(means)
# get condition means for each participant
mss <- d %>%
group_by(mTurkCode, Purity_Violation, High_Dosage) %>%
summarise(Rating = mean(Rating, na.rm=TRUE))
# get difference scores for each participant.
diffs <- mss %>%
summarise(diff = Rating[High_Dosage] - Rating[!High_Dosage], na.rm=TRUE)
# get mean and sd of those differences scores
diffs %>%
group_by(Purity_Violation) %>%
summarise(mean_diff = mean(diff, na.rm=TRUE), sd_diff = sd(diff, na.rm=TRUE))
# Load Library
library(ggplot2)
# Most basic violin chart
ggplot(mss, aes(x=Purity_Violation, y=Rating, fill=High_Dosage)) +
geom_violin() +
stat_summary(fun.data = "mean_cl_boot",
aes(group = High_Dosage), position=position_dodge(width = 1)) +
ggtitle("Violin Plot, Replication of Fig. 1") +
labs(x = "Purity Violation", y = "Wrongness Rating")
library(lme4)
# library(lmerTest)
model <- lmer(Rating ~ Purity_Violation*High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model)
## Run the model without the interaction terms! Rottman also did this
model2 <- lmer(Rating ~ Purity_Violation + High_Dosage +
(1 | mTurkCode) +
(1 | Prompt), d)
summary(model2)
MostWrong <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
print(MostWrong)
View(MostWrong)
MostWrong <- d %>%
group_by(Prompt, Purity_Violation) %>%
summarize(meanWrongness = (mean(Rating, na.rm=T)))
print(MostWrong)
